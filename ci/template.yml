---
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14

resources:
- name: gpupgrade_src
  type: git
  source:
    uri: ((gpupgrade-git-remote))
    branch: ((gpupgrade-git-branch))

- name: gpdb6_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: 6X_STABLE

- name: retail_demo_src
  type: git
  source:
    uri: ((retail-demo-git-remote))
    private_key: ((retail-demo-git-key))
    branch: ((retail-demo-git-branch))

{{range .AllVersions}}
- name: bin_gpdb{{.}}_centos6
  {{- if eq (majorVersion .) "5" }}
  type: s3
  source:
    access_key_id: ((bucket-access-key-id))
    bucket: ((gpdb-stable-builds-bucket-name))
    region_name: ((aws-region))
    secret_access_key: ((bucket-secret-access-key))
    versioned_file: release_candidates/bin_gpdb_centos6/gpdb{{.}}/bin_gpdb.tar.gz
  {{- else}}
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-rc-({{escapeVersion .}}.*)-rhel6_x86_64.debug.tar.gz
  {{- end}}
{{end}}

{{- if .ProdTarget }}
- name: bin_gpupgrade_rc
  type: gcs
  source:
    bucket: ((cm-artifacts-bucket))
    json_key: ((cm-gcs-service-account-key))
    regexp: release-candidates/gpupgrade-rc-(.*)-linux_x86_64
{{end}}

- name: bats
  type: git
  source:
    uri: https://github.com/bats-core/bats-core
    branch: master
    tag_filter: v1.*

- name: slack-alert
  type: slack-notification
  source:
    url: ((cm_webhook_url))

- name: ccp_src
  type: git
  source:
    branch: ((ccp-git-branch))
    private_key: ((ccp-git-key))
    uri: ((ccp-git-remote))

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key))
    vars:
      project_id: ((google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- name: dump_gpdb6_icw_gporca_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: 6X_STABLE/icw_gporca_centos6_dump/dump.sql.xz

- name: dump_gpdb5_simple
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: 5X_STABLE/simple_dump/dump.sql.xz

- name: gp-upgrade-packaging
  type: git
  source:
    branch: master
    private_key: ((gp-upgrade-packaging-git-private-key))
    uri: git@github.com:pivotal/gp-upgrade-packaging.git

anchors:
  - &ccp_default_params
    action: create
    delete_on_failure: true
    generate_random_name: true
    terraform_source: ccp_src/google/

  - &ccp_gen_cluster_default_params
    AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
    AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
    AWS_DEFAULT_REGION: ((aws-region))
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: ((tf-bucket-name))
    CLOUD_PROVIDER: google

  - &ccp_destroy
    put: terraform
    params:
      action: destroy
      env_name_file: terraform/name
      terraform_source: ccp_src/google/
      vars:
        aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
        aws_ebs_volume_type: standard
    get_params:
      action: destroy

  - &set_failed
    do:
      - task: on_failure_set_failed
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: pivotaldata/ccp
              tag: "7"
          inputs:
            - name: ccp_src
            - name: terraform
          run:
            path: 'ccp_src/google/ccp_failed_test.sh'
          params:
            GOOGLE_CREDENTIALS: ((google-service-account-key))
            GOOGLE_PROJECT_ID: ((google-project-id))
            GOOGLE_ZONE: ((google-zone))
            GOOGLE_SERVICE_ACCOUNT: ((google-service-account))
            AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
            AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
            AWS_DEFAULT_REGION: ((tf-machine-region))
            BUCKET_PATH: clusters-google/
            BUCKET_NAME: ((tf-bucket-name))

  - &slack_alert
    do:
      - put: slack-alert
        params:
          text: |
            Hey team, <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|gpupgrade/$BUILD_JOB_NAME> failed.

jobs:
- name: build
  plan:
  - get: gpupgrade_src
    trigger: true
  - task: build
    file: gpupgrade_src/ci/tasks/build.yml
  on_failure:
    <<: *slack_alert

- name: lint
  plan:
  - get: gpupgrade_src
    trigger: true
  - task: lint
    file: gpupgrade_src/ci/tasks/lint.yml
  on_failure:
    <<: *slack_alert

- name: noinstall-tests
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: bats
  - task: noinstall-tests
    file: gpupgrade_src/ci/tasks/noinstall-tests.yml
  on_failure:
    <<: *slack_alert

- name: install-tests
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: gpdb_src
      resource: gpdb6_src
    - get: bats
    - get: bin_gpdb
      resource: bin_gpdb{{.LastTargetVersion}}_centos6
      trigger: true
  - task: install-tests
    file: gpupgrade_src/ci/tasks/install-tests.yml
  on_failure:
    <<: *slack_alert

{{range .UpgradeJobs}}
- name: {{.Source}}-to-{{.Target}}
        {{- if .UseLinkMode }}-link-mode{{end}}
        {{- if .PrimariesOnly }}-primaries-only{{end}}
        {{- if .NoStandby }}-no-standby{{end}}
        {{- if .RetailDemo }}-retail-demo{{end}}
  plan:
    - in_parallel:
        - get: gpupgrade_src
          trigger: true
        - get: bin_gpdb_old
          resource: bin_gpdb{{.Source}}_centos6
          trigger: true
        {{- if ne .Source .Target }}
        - get: bin_gpdb_new
          resource: bin_gpdb{{.Target}}_centos6
          trigger: true
        {{- end }}
        - get: ccp_src
        # FIXME: this is not guaranteed to be the same dump generated by the
        # above binary...
        {{- if not .RetailDemo }}
        - get: sqldump
          {{- if eq (majorVersion .Source) "5" }}
          resource: dump_gpdb5_simple
          {{- else }}
          resource: dump_gpdb6_icw_gporca_centos6
          {{- end }}
        {{- end }}
        {{- if .RetailDemo }}
        - get: retail_demo_src
        {{- end }}
        - get: gp-upgrade-packaging
    - in_parallel:
      - task: transform_old
        file: gp-upgrade-packaging/ci/concourse/package/task.yml
        input_mapping:
          bin-gpdb: bin_gpdb_old
        output_mapping:
          rpm-gpdb: rpm_gpdb_old
      {{- if ne .Source .Target }}
      - task: transform_new
        file: gp-upgrade-packaging/ci/concourse/package/task.yml
        input_mapping:
          bin-gpdb: bin_gpdb_new
        output_mapping:
          rpm-gpdb: rpm_gpdb_new
      {{- end }}
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          {{- if .PrimariesOnly}}
          mirrors: false
          {{- else if not .NoStandby}}
          standby_master: true
          {{- end}}
          instance_type: n1-standard-2
          number_of_nodes: 4
          PLATFORM: centos6
    - task: gen_old_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        PLATFORM: centos6
        GPDB_RPM: true
      input_mapping:
        gpdb_rpm: rpm_gpdb_old
    - task: gpinitsystem_old_cluster
      file: ccp_src/ci/tasks/gpinitsystem.yml
    - task: prepare_old_and_new_installations
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
            tag: latest
        inputs:
          - name: gpupgrade_src
          - name: cluster_env_files
          {{- if ne .Source .Target }}
          - name: rpm_gpdb_new
          {{- end }}
        run:
          path: gpupgrade_src/ci/scripts/prepare-old-and-new-installations.sh
          args:
            - greenplum-db-{{majorVersion .Source}}
            - greenplum-db-{{majorVersion .Target}}
    {{- if not .RetailDemo }}
    - task: load_dump
      file: gpupgrade_src/ci/tasks/load-dump.yml
    {{- end }}
    {{- if .RetailDemo }}
    - task: load_retail_data
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: pivotaldata/gpdb6-centos7-test
            tag: latest
        inputs:
          - name: gpupgrade_src
          - name: retail_demo_src
          - name: ccp_src
          - name: cluster_env_files
        run:
          path: gpupgrade_src/ci/scripts/load-retail-data.bash
      params:
        OLD_PACKAGE: greenplum-db-5
        NEW_PACKAGE: greenplum-db-6
    {{- end }}
    - task: upgrade_cluster
      file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
      params:
        {{- if ne .Source .Target }}
        FILTER_DIFF: 1
        {{- end }}
        {{- if .UseLinkMode}}
        USE_LINK_MODE: 1
        {{- end}}
    {{- if not .NoStandby -}}
    {{- if not .PrimariesOnly }}
    - task: validate_mirrors_and_standby
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: pivotaldata/centos-gpdb-dev
            tag: "6-gcc6.2-llvm3.7"
        inputs:
          - name: gpupgrade_src
          - name: cluster_env_files
        run:
          path: gpupgrade_src/ci/scripts/validate-mirrors-and-standby.bash
    {{- end -}}
    {{- end }}
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  on_failure:
    <<: *slack_alert
{{end -}}

{{- if .ProdTarget }}
# todo: In the future, we want to build gpupgrade first, and input that
# binary to each job that needs it.
# Then, this job can also receive the binary as an input and then will
# upload it to the rc bucket.
- name: publish-release-candidate
  plan:
    - get: gpupgrade_src
      trigger: true
      passed:
        - build
        - noinstall-tests
        - install-tests
        {{- range .UpgradeJobs}}
        - {{.Source}}-to-{{.Target}}
          {{- if .UseLinkMode }}-link-mode{{end -}}
          {{- if .PrimariesOnly }}-primaries-only{{end -}}
          {{- if .NoStandby }}-no-standby{{end -}}
        {{end}}
    - task: build-rc
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: golang
            tag: '1.12.7'
        inputs:
          - name: gpupgrade_src
            path: go/src/github.com/greenplum-db/gpupgrade
        outputs:
          - name: gpupgrade_bin_path
        run:
          path: go/src/github.com/greenplum-db/gpupgrade/ci/scripts/build-rc.sh
    - put: bin_gpupgrade_rc
      params:
        file: gpupgrade_bin_path/gpupgrade-rc-*-linux_x86_64
  on_failure:
    <<: *slack_alert
{{end -}}
